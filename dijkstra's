#using heap:-
import heapq
import sys
class Solution:
    def shortestPath(self, n : int, m : int, edges : List[List[int]]) -> List[int]:
        adj = [[] for _ in range(n)]
        for i in range(m):
            adj[edges[i][0]].append([edges[i][1],edges[i][2]])
        
        heap = []
        #[dist,node]
        heapq.heappush(heap,[0,0])
        dist = [sys.maxsize]*n
        dist[0] = 0
        spset = set()
        spset.add(0)
        while(heap):
            [cdist,node] = heapq.heappop(heap)
            for [neighbour,d] in adj[node]:
                if neighbour not in spset and cdist + d < dist[neighbour]:
                    spset.add
                    heapq.heappush(heap,[cdist+d,neighbour])
                    dist[neighbour] = cdist + d
        
        for i in range(n):
            if dist[i]==sys.maxsize:
                dist[i] = -1
        return dist


#without heap
class Solution:

    #Function to find the shortest distance of all the vertices
    #from the source vertex S.
    def minDist(self,V,mindist,spset):
        mini = sys.maxsize
        min_index=0
        for i in range(V):
            if(spset[i]!=True and mindist[i]<=mini):
                mini,min_index=mindist[i],i
        return min_index
        
    def dijkstra(self, V, adj, S):
        mindist = [sys.maxsize]*V
        spset = [False]*V
        mindist[S]=0
        for i in range(V-1):
            u = self.minDist(V,mindist,spset)
            spset[u]=True
            for [i,w] in adj[u]:
                if((spset[i]!=True and mindist[u]!=sys.maxsize) and mindist[u]+w<=mindist[i]):
                    mindist[i] = mindist[u]+w
        return mindist
